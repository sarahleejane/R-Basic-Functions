setwd("C:\Users\user\Documents\DataScience")
setwd("C:\Users\user\Documents\DataScience\")
setwd("C:/Users/user/Documents/DataScience/")
create.project("R.Basic.Functions")
library(ProjectTemplate)
create.project("R.Basic.Functions")
setwd("C:/Users/user/Documents/DataScience/R.Basic.Functions/")
sum(2,3,4)
rep("Ruskin", times=3)
sqrt(16)
help(sum)
example(min)
list.files()
source("parrot example1.R")
setwd("C:/Users/user/Documents/DataScience/R.Basic.Functions/src/")
source("parrot example1.R")
"Polly wants a cracker"
source("parrot example1.R")
source("parrot example1.R")
print("Polly wants a cracker")
source("parrot example1.R")
c(1,2,3)
c('a','b','c')
c(TRUE, FALSE)
c(5:9)
seq(5,9)
seq(5,9,0.5)
c(1:5) #sequence vector - same as:
seq(1,5)
seq(1,5,0.1)
phrase <- c("i", "love", "muffins")
phrase[3]
phrase[2] <- "adore"
phrase
phrase[5] <- "mmmmm"
phrase
phrase[c(3,5)]
phrase[3,5]
phrase[c(3:5)]
phrase[(3:5)]
ranks <- c(1:3)
names(ranks) <- c("first", "second", "third")
ranks["first"]
barplot(ranks)
barplot(1:100)
a <- (1,2,3)
a <- c(1,2,3)
a + 1
b <- c(10,20,30)
a+b
a-b
a==c(1,3,3)
a==1
a==c(1,3,3,4) #Equality per position
sin(a)
x <- seq(1,20,0.1)
y <- sin(x)
plot(x,y)
a <- c(1,2,3,NA,5)
sum(a)
sum(a, na.rm = FALSE) #NA removed from vector before calculation
sum(a, na.rm = TRUE) #NA removed from vector before calculation
matrix(0,2,5)
a <- matrix(0,2,5) #values 0, 2 rows, 5 columns
matrix(0,2,5) #values 0, 2 rows, 5 columns
a <- 1:10
matrix(a,2,5)
dim(a) <- c(2,5)
a
a[2,2]
a[2,]
a[,2]
a[,1:2] #entire cols
beach.elevation <- (1,5,5)
beach.elevation[2,2] <- 0
beach.elevation <- matrix(1,5,5)
beach.elevation[2,2] <- 0
contour(beach.elevation)
persp(beach.elevation)
persp(beach.elevation, expand = 0.2)
persp(beach.elevation, expand = 0.1) #so our highest value isn't right at top
persp(beach.elevation, expand = 0.1) #so our highest value isn't right at top
par(ask=T)
persp(beach.elevation, expand = 0.1) #so our highest value isn't right at top
persp(beach.elevation, expand = 0.4) #so our highest value isn't right at top
beach.elevation[3,3] <- 0
persp(beach.elevation, expand = 0.4) #so our highest value isn't right at top
beach.elevation <- matrix(1,5,5)
beach.elevation <- matrix(1,5,5)
beach.elevation[3,3] <- 0
contour(beach.elevation) #cool contour plot
persp(beach.elevation, expand = 0.4) #so our highest value isn't right at top
contour(volcano)
